!/bin/bash

# Function 'usage' defined before set options. All other functions defined afterwards
usage () {
cat <<-END

NAME
       $(basename $0)

       This script opens a file in vim from anywhere within an application
       framework.  

SYNOPSIS
        $(basename $0) [-c] [-d] [-f] [-h] [-i] [-l] [-m] [-v]  <search term> [filename1 
        filname2 ...]

DESCRIPTION

       $(basename $0) may be used to open any file from within an application 
       root directory without the need to change directory or specify 
       file paths. For example, '$(basename $0) routes.rb' opens the 'routes.rb' 
       file from any directory within a Ruby-on-Rails application.  

       The script is written with Ruby-on-Rails and Middleman in mind. 
       It works best from within applications generated by these frameworks,
       but it may be used anywhere (albeit with restricted functionality).

       It is also not restricted to vim, but will open files in any editor
       specified by the EDITOR ENV variable

       Directories may be searched for, but not opened in ${EDITOR}, 
       using the '-d' option.

       Outside the root directory, the file path may have to be specified.

       If more than one file or directory is found, the output is a 
       numbered list, from which a file (but not a directory) may be 
       selected and opened in ${EDITOR}. 

       If only a single file is found, it is by default opened 
       automatically in ${EDITOR}.

       If more than one non-optional argument is given, all files (not
       directories)  are opened in ${EDITOR} provided they exist in the
       current directory. This default behaviour may be over-ridden using
       the '-m' option. 
       
       To search for multiple terms, use the '-m' option. 

       The basic search command is of the following form, 
       where VIMODIR strives to be the application root directory.

          find VIMODIR -type f -name <search-term> 

OPTIONS 

      -c: use current directory. When this option is used, the basic 
          search command is of the type:
         
          find . -type f -name <search-term>
       
      -f: give the full directory path
      -d: search for directories only
      -h: get help
      -i: case-insensitive search
      -l: give a list of file locations only (open in text editor 
          functionality disabled) 
      -m: search for multiple terms 
      -v: verbose mode. Gives, among other things, a list of functions
          called. 

REQUIREMENTS
      
      (1)  The EDITOR ENV variable need not be set, but may be set to an
           editor of choice. The default value is vim.
           You may wish to execute the following prior to running the
           script. 
           EDITOR='vim'
           export EDITOR
           Or, include the following line in your .bashrc file
           export EDITOR='vim'

      (2)  The VIMODIR ENV variable controls working directory and
           strives to be the application root directory.
           It may be changed to the current working directory as follows:
           VIMODIR=\$(pwd) 
           export VIMODIR
           Alternatively,
           VIMODIR='/full/path/to/working/directory' 
           export VIMODIR
           Or, include the following line in your .bashrc file
           export VIMODIR='/full/path/to/working/directory'
     
      (3)  The VIMOMAX ENV variable controls the maximum number of 
           search results shown. If the number exceeds VIMOMAX, the user
           is given the choice whether to continue or abort.
           This ENV variable need not be set, and defaults to the value
           of 30. It may be changed as follows:
           VIMOMAX=50
           export VIMOMAX
           Or, include the following line in your .bashrc file
           export VIMOMAX=50

      (4)  The VIMOCHOICE ENV variable controls how multiple files are 
           opened in vim. If more than VIMOCHOICE files are to be 
           opened (where, for example,the command contains multiple 
           search terms without the '-m' option), the user will be 
           given a choice whether to proceed or abort.
           This ENV variable need not be set, and defaults to the value
           of 2. It may be changed as follows:
           VIMOCHOICE=3
           export VIMOCHOICE
           Or, include the following line in your .bashrc file
           export VIMOCHOICE=3

NOTES
      (1)  Tested with Rails 4 and Rails 5, and Middleman with Ubuntu 14
           and xubuntu 16.  
      (2)  It is best to double-quote search terms, especially if 
           wildcards are included 
      (3)  $(basename $0) may be used to search for either files or 
           directories, but not both.  The default behaviour is to 
           find files only.

EXAMPLE USAGE
      (1)  $(basename $0) "routes.rb"  
      (2)  $(basename $0) -l "index*"   # list only 
      (3)  $(basename $0) -cl "index.html.erb" # list only from current directory
      (4)  $(basename $0) -clf "index.html*"   # list only from current directory
           and give full paths
      (5)  $(basename $0) -i "gemfile"  # case-insensitive
      (6)  $(basename $0) -vil "gemfile"  # verbose mode, case-insensitive, list only
      (7)  $(basename $0) -d  "stylesheet*" # directory search
      (8)  $(basename $0) "fileOne" "fileTwo"  # Open both files in ${EDITOR} provided that
           they exist in current directory
      (9)  $(basename $0) -m "fileOne" "fileTwo" # Multiple search terms
      (10) $(basename $0) -md "dirOne" "dirTwo"  # Multiple serch terms, directories only

AUTHOR
      tomgdow
END
}

# Set Options

if [[ -z "${VIMOMAX// }" ]];then
	# If the EVV variable VIMOMAX is not set, set it
	VIMOMAX=30 
fi 

if [[ -z "${VIMOCHOICE// }" ]];then
	# If the EVV variable VIMOMAX is not set, set it
	VIMOCHOICE=2 
fi 

while getopts ":cdfhilvm" opt; do
	case $opt in
		c)
			usecurrentdir=1 
			;;
		d)
			searchdir=1 
			;;
		f)
			fullpath=1 
			;;
		h)
			usage | less
			exit 1
			;;
		i)
			caseinsensitive=1 
			;;
		l)
			listonly=1 
			;;
		m)
			multisearch=1 
			;;
		v)
			verbose=1 
			;;
	esac
done
shift $(( ${OPTIND} - 1 ))

# Functions

checkArg () {

	if [[ ${verbose} == 1 ]]; then
		checkargs=$(showFunctionName)
	fi

	if [[ ! ${1} ]]; then
		echo "-->Missing argument ('vimo -h' for help)" 
		exit 1
	fi

	if [[ ${#} -gt 1 &&  ${multisearch} -ne 1 ]]; then
		openAll "${@}"
		exit 1
	fi
}

setEditor () {

	if [[ ${verbose} == 1 ]]; then
		showFunctionName
	fi

	# if EDITOR is not set, use vim 
	if [[ -z "${EDITOR// }" ]];then
		EDITOR='vim'
	fi 
}

showFunctionName () {
	echo "Call: ${FUNCNAME[1]}"
}

setWorkingDirectory () {

	if [[ ${verbose} == 1 ]]; then
		workdir=$(showFunctionName)
	fi

	if [[ -z "${VIMODIR// }" ]];then	# if the working directory (VIMODIR) is not set, set it. 
		VIMODIR=$(pwd)
		for var in "/app*" "/public*" "/config*" "/source*"  "/partials*"; do
			VIMODIR=${VIMODIR%$var}
		done
	fi
}

findPaths () {

	if [[ ${verbose} == 1 ]]; then
		showFunctionName
	fi

	if [[ ${@:${#@}} == 0 ]]; then  # check last arg equals zero
		searchtype="f"
	else
		searchtype="d"
	fi

	if [[ ${usecurrentdir} == 1 ]]; then
		searchpath=$(pwd)
	else
		searchpath="${VIMODIR}"
	fi

	if [[ ${caseinsensitive} == 1 ]];then
		nametype="iname"
	else
		nametype="name"
	fi 

	for var in "${@:1:$(($#-1))}";do  # all args except last
		temp=$(find "${VIMODIR}" -type $searchtype -"${nametype}" "$var")
		if [[ ${#temp} -ne 0 ]]; then 
			find_paths+="${temp}\n"
		fi
	done

	find_paths=$(echo -e "${find_paths}")
}

stringNumber () {

	declare -a arrOfStrings=(${@})
	declare -i stringNo="${#arrOfStrings[@]}"
	echo "${stringNo}"
}

checkPathsNumber () {

	# Check the number of files OR directories returned,
	# if greater than VIMOMAX, give user choice

	if [[ ${verbose} == 1 ]]; then
		showFunctionName
	fi
	stringNo=$(stringNumber "${1}")
	if [[ ${stringNumber} -gt ${VIMOMAX} ]];then
		read -p  "${stringNo} files detected. Do you wish to continute [Y/n]?"\
			userchoice
		if [[ $userchoice == [Yy]* ]]; then
			echo "OK"
		else
			echo "Exiting at user request"
			exit 1
		fi
	fi 
}

showFileDirPath () {

	# Show the file/dir location when only a single file/dir is found
	# invoked by the -l option

	if [[ ${verbose} == 1 ]]; then
		showFunctionName
	fi

	find_paths=${1}

	if [[ ${@:${#@}} -eq 0 ]]; then  # if last arg equals zero
		echo "Not found: ${@:2:$(($#-2))}" 
	elif [[ ${@:${#@}} -eq 1 ]]; then 

		if [[ ${fullpath} == 1 ]];then
			find_paths=${find_paths#$HOME}
		else
			find_paths="${find_paths#${VIMODIR}}"
		fi

		echo  "1)  ${find_paths}"
		exit 1
	fi
}

showFilesDirsPaths () {

	# Show a numbered list of files or directories if more than one detected
	# involked by the -l option

	if [[ ${verbose} == 1 ]]; then
		showFunctionName
	fi

	IFS=$'\n'  # necessary if find_paths contains spaces in returned filepaths 
	arrpaths=(${find_paths})
	len="${#arrpaths[@]}"

	if [[ len > 1 ]]; then

		if [[ ${fullpath} == 1 ]];then
			arrpaths=(${arrpaths[@]#${HOME}})
		else
			arrpaths=(${arrpaths[@]#${VIMODIR}})
		fi

		for ((i=0; i < len; i++)); do
			echo "$(( ${i}+1))"") ${arrpaths[i]}"
		done 

	else
		echo "Only one file found"
	fi
}

openFile () {

	# Open a file (but not a directory) in EDITOR 

	if [[ ${verbose} == 1 ]]; then
		showFunctionName
	fi

	stringNo=$(stringNumber "${1}") #could fix this

	if [[ ${stringNo} -eq 0 ]];then
		echo "File not detected --> ${1}"
		exit 1
	elif [[  ${stringNo} -eq 1 ]];then
		$EDITOR  "${find_paths}"  
		exit 0
	fi
}

openAll () {

	# Open all arguments in EDITOR  provided that they exist in current
	# directory

	#declare foundFiles
	if [[ ${verbose} == 1 ]]; then
		showFunctionName
	fi

	if [[ ${caseinsensitive} == 1 ]];then
		nametype="iname"
	else
		nametype="name"
	fi 

	for var in "${@}";do 
		temp=$(find . -type f -"${nametype}" "$var")
		if [[ ${#temp} -ne 0 ]]; then 
			foundFiles+="${temp}\n"
		fi
	done

	foundFiles=$(echo -e "${foundFiles}")
	declare -a arrFoundFiles=(${foundFiles})
  declare -i count="${#arrFoundFiles[@]}"

	if [[ ${count} -gt ${VIMOCHOICE} ]];then
		read -p  "--> ${count} files will be opened in ${EDITOR}. \
Do you wish to continue [Y/n]?" userchoice
		if [[ $userchoice == [Yy]* ]]; then
			$EDITOR ${foundFiles}
		else
			echo "Exiting at user request"
			exit 1
		fi
	elif [[ ${count} -gt 0 ]];then

		$EDITOR ${foundFiles}
	else 
		echo "-->Files not found in current directory: ${@}"
		echo "--> To search for multiple terms, use the '-m' option"
	fi 
}

showSelectList () {

	# Shows a select-list of files (but not directories) to user if more than one detected

	if [[ ${verbose} == 1 ]]; then
		showFunctionName
	fi

	stringNo=$(stringNumber "${1}")
	pathlist="${1}"
	IFS=$'\n'  # necessary if find_paths contains spaces in returned filepaths 
	arrpath=($pathlist)
	arrpaths=("Quit" ${arrpath[@]})  

	if [[ ${fullpath} == 1 ]];then
		arrpaths=(${arrpaths[@]#${HOME}})
	else
		arrpaths=("${arrpaths[@]#${VIMODIR}}")
	fi

	PS3="[2-${#arrpaths[@]}] File to open in ${EDITOR} ('1' to Quit)? "

	select file in ${arrpaths[@]}; do
		if [ "$file" = "Quit" ]; then
			echo "Quit at user request."
			break
		elif [ -n "$file" ]; then
			vim  "${arrpath[$(( $REPLY -2 )) ]}" 
			break
		else
			echo "Invalid selection!"
		fi 
	done
}

showWorkingDirectory () {
	echo "Working Directory (VIMODIR): ${VIMODIR}"
}

pipeToLess () {
	temp="$1"
	shift
	filenumber="${1}"
	if [[ ${filenumber} -gt 20 ]]; then
		"${temp}" | less
	else
		"${temp}"
	fi
}

init () {

	checkArg "${@}"
	setWorkingDirectory

	if [[ ${verbose} == 1 ]]; then
		showWorkingDirectory
		echo "Max File Number (VIMOMAX): ${VIMOMAX}"
		echo "Editor (EDITOR): ${EDITOR}"
		showFunctionName
		echo "${checkargs}"
		echo "${workdir}"
	fi

	setEditor

	if [[ ${searchdir} == 1 ]];then
		# Search for directories only

		findPaths  "${@}" 1 
		checkPathsNumber "${find_paths}"
		showFileDirPath "${find_paths}" "${@}" "${stringNo}"
		pipeToLess showFilesDirsPaths  "${stringNo}"
		exit 1
	else
		# Search for files only 

		if [[ ${listonly} == 1 ]];then
			findPaths  "${@}" 0 
			checkPathsNumber "${find_paths}"
			showFileDirPath "${find_paths}" "${@}" "${stringNo}"
			pipeToLess showFilesDirsPaths  "${stringNo}"
		else  
			findPaths  "${@}" 0 
			checkPathsNumber "${find_paths}"
			openFile "${find_paths}"
			showSelectList "${find_paths}"
		fi 
	fi
}

init "$@"
