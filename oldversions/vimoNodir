#!/bin/bash

# Function 'usage' defined before set options. All other functions defined afterwards
usage () {
cat <<-'END'

  vimo [-c] [-f] [-h] [-i] [-l] [-v]  <search term>

This program opens a file in Vim from anywhere within an application framework.  

For example, 'vimo routes.rb' opens the 'routes.rb' file from any directory within a Ruby-on-Rails application.  
The program is written with Ruby-on-Rails and Middleman in mind. 
It works best from within applications generated by these frameworks,but it may be used anywhere (albeit with restricted functionality).

It is also not restricted to Vim, but will open files in any editor specified by the EDITOR ENV variable

In other words, the program may be used to open any file from within an application root directory without the need to change directory or specify file paths.
Outside the root directory, the file path may have to be specified.

If more than one file is found, the output is a numbered list that allows selection of the appropiate file.

The basic search command is of the following form, where VIMODIR strives to be the application root directory:

		'find VIMODIR -type f -name <search-term>

      -c: use current directory. When this option is used, the basic search command is of the type:
         
		'find . -type f -name <search-term>
       
      -f: give the full directory path for files
      -h: get help
      -i: case-insensitive search
      -l: give a list of file locations only (open in text editor functionality disabled) 
      -v: verbose mode. Gives, among other things, a list of functions called. 

    REQUIREMENTS
      
       (1)  The EDITOR ENV variable need not be set, but may be set to an editor of choice.
            The default value is 'vim'.
            You may wish to execute the following prior to running the program. 
              EDITOR='vim'
              export EDITOR
            Or, include the following line in your .bashrc file
              export EDITOR='vim'

       (2)  The VIMODIR ENV variable controls working directory and strives to be the application root directory.
            It may be changed to the current working directory as follows:
              VIMODIR=$(pwd) 
              export VIMODIR
            Alternatively,
              VIMODIR='/full/path/to/working/directory' 
              export VIMODIR
            Or, include the following line in your .bashrc file
              export VIMODIR='/full/path/to/working/directory'
     
       (3)  The VIMOMAX ENV variable controls the maximum number of search results shown.
            If the number exceeds VIMOMAX, the user is given the choice whether to continue or abort.
            This ENV variable need not be set, and defaults to the value of 30.
            It may be changed as follows:
              VIMOMAX=50
              export VIMOMAX
            Or, include the following line in your .bashrc file
              export VIMOMAX=50

    NOTES
       (1)  Tested with Rails 4 and Rails 5, and Middleman 
       (2)  It is best to double-quote search terms, especially if wildcards are included 
       (3)  Finds files only. Directories will NOT be searched for or opened 

    EXAMPLE USAGE
       (1)  vimo  "routes.rb"  
       (2)  vimo -l "index*"   
       (3)  vimo -cl "index.html.erb" 
       (4)  vimo -clf "index.html*" 
       (5)  vimo -i "gemfile" 
       (6)  vimo -vi "gemfile" 
END
}

# Set Options

if [[ -z "${VIMOMAX// }" ]];then
	# If more than VIMOMAX number of files is found, the user is given a choice to continue or abort
	# Change using the ENV variable VIMOMAX. Run 'vimo -h' for details. 
	VIMOMAX=30 
fi 

while getopts ":cfhilv" opt; do
	case $opt in
		c)
			usecurrentdir=1 
			;;
		f)
			fullpath=1 
			;;
		h)
			usage | less
			exit 1
			;;
		i)
			caseinsensitive=1 
			;;
		l)
			listonly=1 
			;;
		v)
			verbose=1 
			;;
	esac
done
shift $(( ${OPTIND} - 1 ))

# Functions

setEditor () {
	# if EDITOR is not set, use vim 

	if [[ -z "${EDITOR// }" ]];then
		EDITOR='vim'
	fi 
}

showFunctionName () {
	echo "Call: ${FUNCNAME[1]}"
}

setWorkingDirectory () {

	if [[ $verbose == 1 ]]; then
		workdir=$(showFunctionName)
	fi

	if [[ -z "${VIMODIR// }" ]];then
		# if the working directory (ENV variable VIMODIR) is not set, set it. 
		VIMODIR=$(pwd)
		for var in "/app*" "/public*" "/config*" "/source*"  "/partials*"; do
			VIMODIR=${VIMODIR%$var}
		done
	fi
}

fileNumber () {
	# assign number of files found to variable

	if [[ $verbose == 1 ]]; then
		showFunctionName
	fi

	if [[ $usecurrentdir == 1 ]]; then
		fileno="$(find . -type f -name  "$1" | wc -l)"
	else

		if [[ $caseinsensitive == 1 ]]; then
			fileno="$(find "${VIMODIR}" -type f -iname "$1" | wc -l)"
		else
			fileno="$(find "${VIMODIR}" -type f -name "$1" | wc -l)"
		fi

	fi
}

checkFileNumber () {
	# check the number of files returned

	if [[ fileno -gt ${VIMOMAX} ]];then
		read -p  "${fileno} files detected. You you wish to continute [Y/n]?" userchoice
		if [[ $userchoice == "Y" ||  $userchoice == "Yes" ]]; then
			echo "OK"
		else
			echo "Exiting at user request"
			exit 1
		fi
	fi 
}

findMe () {

	if [[ $verbose == 1 ]]; then
		showFunctionName
	fi

		if [[ $usecurrentdir == 1 ]]; then
			find_files="$(find . -type f -name "$1")"
		else
			if [[ $caseinsensitive == 1 ]]; then
				find_files="$(find "${VIMODIR}" -type f  -iname "$1")"
			else
				find_files="$(find "${VIMODIR}" -type f  -name "$1")"
			fi
		fi
}

showAllFilePaths () {
	# Shows a numbered list of files to user if more than one detected
	# involked by the -l option

	if [[ $verbose == 1 ]]; then
		showFunctionName
	fi

	IFS=$'\n'  # necessary if find_files contains spaces in returned filepaths 
	arrfiles=(${find_files})

	len="${#arrfiles[@]}"
	if [[ len > 1 ]]; then

		if [[ ${fullpath} == 1 ]];then
			arrfiles=(${arrfiles[@]#${HOME}})
		else
			arrfiles=(${arrfiles[@]#${VIMODIR}})
		fi

		for ((i=1; i < len; i++)); do
			echo "${i}) ${arrfiles[i]}"
		done

	else
		echo "Only one file found"
	fi
}

showSelectList () {
	# Shows a select-list of files to user if more than one detected

	if [[ $verbose == 1 ]]; then
		showFunctionName
	fi

	filelist="${find_files}"
	IFS=$'\n'  # necessary if find_files contains spaces in returned filepaths 
	arrfile=($filelist)
	arrfiles=("Quit" ${arrfile[@]})  

	if [[ ${fullpath} == 1 ]];then
		arrfiles=(${arrfiles[@]#${HOME}})
	else
		arrfiles=("${arrfiles[@]#${VIMODIR}}")
	fi

	PS3='File to open in vim ('1' to Quit)? '

	select file in ${arrfiles[@]}; do
		if [ "$file" = "Quit" ]; then
			echo "Quit at user request."
			break
		elif [ -n "$file" ]; then
			vim  "${arrfile[$(( $REPLY -2 )) ]}" 
			break
		else
			echo "Invalid selection!"
		fi 
	done
}

openFile () {
	#open a file in EDITOR 

	if [[ $verbose == 1 ]]; then
		showFunctionName
	fi
	if [[  ${fileno} -eq 0 ]];then
		echo "File not detected --> ${1}"
		exit 1
	elif [[  ${fileno} -eq 1 ]];then
		$EDITOR  "${find_files}"  
		exit 0
	fi
}

showFilePath () {
	# Show the file location when only a single file is found
	# invoked by the -l option

	if [[ $verbose == 1 ]]; then
		showFunctionName
	fi

	if [[  ${fileno} -eq 0 ]];then
		echo "File not detected --> ${1}"
		exit 1
	elif [[  ${fileno} -eq 1 ]];then

		if [[ ${fullpath} == 1 ]];then
			find_files=${find_files#$HOME}
		else
			find_files="${find_files#${VIMODIR}}"
		fi
		echo  "1)  ${find_files}"
		exit 1
	fi
}

showWorkingDirectory () {
	echo "Working Directory (VIMODIR): ${VIMODIR}"
}

init () {

	setWorkingDirectory

	if [[ $verbose == 1 ]]; then
		showWorkingDirectory
		echo "Max File Number (VIMOMAX): ${VIMOMAX}"
		echo "Editor (EDITOR): ${EDITOR}"
		showFunctionName
		echo "${workdir}"
	fi

	setEditor
	fileNumber "$1" 
	checkFileNumber

	if [[ $listonly == 1 ]];then
		findMe  "$1"
		showFilePath "$1"
		showAllFilePaths
	else  
		findMe  "$1"
		openFile "$1" 
		showSelectList
	fi 
}

init "$1"
